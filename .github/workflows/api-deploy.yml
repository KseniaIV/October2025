name: Build and Deploy APISIX Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'

env:
  NODE_VERSION: '18'
  SERVICE_NAME: apisix-rss-service

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
        
    - name: Install dependencies
      working-directory: ./api
      run: npm ci
      
    - name: Lint code
      working-directory: ./api
      run: npm run lint || true  # Don't fail on lint errors for now
      
    - name: Build TypeScript
      working-directory: ./api
      run: npm run build
      
    - name: Run tests
      working-directory: ./api
      run: npm test
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage/lcov.info
        directory: ./api/coverage/
        flags: api
        name: apisix-service
        fail_ci_if_error: false

  build:
    name: Build Docker Image  
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: kubectl, docker-compose, or API calls to your hosting provider
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest  
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add your production deployment commands here
        # For example: kubectl, docker-compose, or API calls to your hosting provider

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code  
      uses: actions/checkout@v4
      
    - name: Run security audit
      working-directory: ./api
      run: |
        npm audit --audit-level high
        
    - name: Scan Docker image for vulnerabilities
      if: github.event_name == 'push'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.SERVICE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      if: github.event_name == 'push'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
